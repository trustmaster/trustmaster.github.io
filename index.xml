<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A system brought to life</title>
    <link>https://blog.kodigy.com/</link>
    <description>Recent content on A system brought to life</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© Vladimir Sibirov. Code released under the MIT license.</copyright>
    <lastBuildDate>Sun, 28 Aug 2022 17:30:12 +0200</lastBuildDate><atom:link href="https://blog.kodigy.com/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>The state of Flow-based Programming</title>
      <link>https://blog.kodigy.com/post/state-of-flow-based-programming/</link>
      <pubDate>Sun, 28 Aug 2022 17:30:12 +0200</pubDate>
      
      <guid>https://blog.kodigy.com/post/state-of-flow-based-programming/</guid>
      <description>In memory of J. Paul Morrison. May he rest in peace, and his work continue to live.
I started this article in 2018 as a collection of observations and ideas that I wanted to share with the Flow-based Programming community. It didn&amp;rsquo;t go beyond a quick draft that never got published. During the next 4 years I barely thought about Flow-based Programming. My focus was on figuring out how software is built in large companies.</description>
    </item>
    
    <item>
      <title>Natural Weekly Rhythm</title>
      <link>https://blog.kodigy.com/post/natural-weekly-rhythm/</link>
      <pubDate>Wed, 29 Sep 2021 18:29:14 +0200</pubDate>
      
      <guid>https://blog.kodigy.com/post/natural-weekly-rhythm/</guid>
      <description>Natural weekly rhythm Synchronize the rhythm of a week with productivity cycles for majority of people in the team to reduce stress and increase effectiveness.
This article is part of Engineering Manager&amp;rsquo;s Runbook. You can support the project by starring the repo or sharing it with your network.
Infographics Situation If you are creating team&amp;rsquo;s meetings schedule from scratch or looking for opportunities to improve an existing one, this is your go to guide.</description>
    </item>
    
    <item>
      <title>Project Tech Leads</title>
      <link>https://blog.kodigy.com/post/project-tech-leads/</link>
      <pubDate>Sun, 18 Apr 2021 17:29:14 +0200</pubDate>
      
      <guid>https://blog.kodigy.com/post/project-tech-leads/</guid>
      <description>Any Engineer in the team can lead a project. Any project should have a technical lead.
Infographics Motivation Typically in many teams an Engineering Manager is responsible, among other things, for collecting technical requirements for initiatives, making high level technical decisions, documenting solutions, setting up communication within the team and with external stakeholders, addressing risks, etc.
While this approach creates rather comfortable conditions for engineers to focus on getting their tasks done, there is a problem: this model doesn&amp;rsquo;t scale.</description>
    </item>
    
    <item>
      <title>Google Keep framework for TODO and Goal tracking</title>
      <link>https://blog.kodigy.com/post/google-keep-todo-goal-tracking/</link>
      <pubDate>Tue, 05 Jan 2021 19:40:39 +0100</pubDate>
      
      <guid>https://blog.kodigy.com/post/google-keep-todo-goal-tracking/</guid>
      <description>Keeping track of tasks helps in many ways. Remember the milk - check. Get things done - check. Build healthy habits - check. Get an overview of your progress - check. Control your life - well, that&amp;rsquo;s arguably possible. Feel more of contentment and accomplishment - check!
In this article I&amp;rsquo;m going to share the framework I&amp;rsquo;ve been using for organizing my tasks over the last few years. I don&amp;rsquo;t insist you should use this framework or this specific application, but maybe it will give you some inspiration.</description>
    </item>
    
    <item>
      <title>SOLID design principles in short poems</title>
      <link>https://blog.kodigy.com/post/solid_principles_in_short_poems/</link>
      <pubDate>Mon, 12 Mar 2018 22:33:45 +0100</pubDate>
      
      <guid>https://blog.kodigy.com/post/solid_principles_in_short_poems/</guid>
      <description>Software Design is hard. It is complicated, it takes years to learn (in a sense that you really know what you are doing and why, compared to just copying and pasting something that you read somewhere) and sometimes it is counter-intuitive.
I started making these notes to better understand SOLID design principles myself while reading the &amp;ldquo;Clean Architecture&amp;rdquo; by Robert C. Martin. The book points to common misunderstandings of these principles, but the explanations given are far from being easily memorable.</description>
    </item>
    
    <item>
      <title>About the author</title>
      <link>https://blog.kodigy.com/about/author/</link>
      <pubDate>Mon, 12 Mar 2018 22:24:47 +0100</pubDate>
      
      <guid>https://blog.kodigy.com/about/author/</guid>
      <description>Hello world! My name is Vladimir, an Engineering Manager, Software Engineer, and a slow and lazy writer. I have Master degree in Computer Science and background in Content Management Systems, Web Development Agencies, and Product Engineering from small start-ups to large global scale-ups.
Interests Currently I write mostly about:
Managing Software Engineering teams Architecture and Systems Design Coaching and productivity You can find some of my older posts on this site about:</description>
    </item>
    
    <item>
      <title>TypeScript: JavaScript way to Go</title>
      <link>https://blog.kodigy.com/post/typescript_to_go/</link>
      <pubDate>Wed, 26 Jul 2017 14:48:53 +0300</pubDate>
      
      <guid>https://blog.kodigy.com/post/typescript_to_go/</guid>
      <description>My journey at The Grid was over and I had 3 months before the start of a new contract, so I took an opportunity to fill a position of an interim CTO at Dater.com, a new dating app that is going to change the industry by moving from &amp;ldquo;post &amp;amp; search&amp;rdquo; approach to online &amp;amp; offline game-alike activity.
The main challenge was setting higher standards of development culture within the team and facilitating the development cycle.</description>
    </item>
    
    <item>
      <title>Forcing a specific NoFlo version for all dependencies</title>
      <link>https://blog.kodigy.com/post/noflo_08_npm_shrinkwrap/</link>
      <pubDate>Mon, 13 Mar 2017 18:25:04 +0300</pubDate>
      
      <guid>https://blog.kodigy.com/post/noflo_08_npm_shrinkwrap/</guid>
      <description>Using NPM Shrinkwrap to force NoFlo 0.8 Recently released 0.8 branch of NoFlo introduces several fundamental changes as well as a backwards compatibility layer for long-existing applications. However, the backwards compatibility layer is only capable of doing its job if all NPM dependencies in a project use noflo@0.8.*. Which means that if a project uses an old library that depends on something like noflo@0.5.22, the compatibility layer may work incorrectly.</description>
    </item>
    
    <item>
      <title>Development efficiency challenges in NoFlo</title>
      <link>https://blog.kodigy.com/post/noflo_development_efficiency/</link>
      <pubDate>Mon, 07 Nov 2016 17:39:26 +0100</pubDate>
      
      <guid>https://blog.kodigy.com/post/noflo_development_efficiency/</guid>
      <description>Development efficiency challenges in NoFlo Programming with NoFlo is getting more and more smooth with every release. However, if maintaining a NoFlo application is your day-to-day job you may notice some inconveniences.
Defining new components is slow Every time you add a new component you have to define a pretty massive hash map of its ports, their data types and preferably at least descriptions. This is cool as it encourages you to declare as many details as possible but it’s not very friendly to rapid prototyping where you want just to list the ports and get your hands on the code and add details later.</description>
    </item>
    
    <item>
      <title>On NoFlo database applications</title>
      <link>https://blog.kodigy.com/post/on_noflo_db_apps/</link>
      <pubDate>Wed, 27 Jul 2016 14:25:04 +0100</pubDate>
      
      <guid>https://blog.kodigy.com/post/on_noflo_db_apps/</guid>
      <description>On NoFlo Database Applications Thinking over common parts of database applications&amp;hellip;
… I came to some conclusions below
Common application architecture Steps common to all route graphs The only processing step that is often present and easy to decompose is Validate (fig. I and II). String of pearls or Pipeline or Request backbone Request flow should be serial, it simplifies synchronization and understanding of the flow. Each bone in the spine of the graph or step on the pipeline can process some data in parallel.</description>
    </item>
    
    <item>
      <title>Running web services as NoFlo graphs</title>
      <link>https://blog.kodigy.com/post/noflo_webservices/</link>
      <pubDate>Fri, 23 Jan 2015 14:38:41 +0100</pubDate>
      
      <guid>https://blog.kodigy.com/post/noflo_webservices/</guid>
      <description>Getting All Things NoFlo This article describes things which are yet TODO to get the entire server architecture running on NoFlo (and in Flowhub), problems related to them and potential solutions.
Request Isolation By default there is no isolation between IPs belonging to different user requests in NoFlo networks.
Solution 1 (current): a new Network instance per request Express does its job conventionally, while request handlers instantiate NoFlo networks on demand.</description>
    </item>
    
    <item>
      <title>Comparison of dataflow models</title>
      <link>https://blog.kodigy.com/post/dataflow-model-comparison/</link>
      <pubDate>Sun, 03 Jun 2012 15:56:29 +0100</pubDate>
      
      <guid>https://blog.kodigy.com/post/dataflow-model-comparison/</guid>
      <description>Comparison of dataflow models Mathematical model of choice Comparison criteria and analysis methods should be chosen before performing actual analysis.
We will solve the task of parallel computation model evaluation as a multiple criteria choice. In order to do this, a set of particular criteria is outlined and for each of them a mapping to the real numbers set is defined:
k(x):i(x)→R(1) where x - is alternative choice (model); i(x) - is a particular factor value; R - is the set of real numbers; k - is the particular criterion number, k∈[1,K]; K - total number of particular criteria.</description>
    </item>
    
  </channel>
</rss>
